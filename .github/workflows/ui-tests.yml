name: UI Component Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'packages/ui/**'
      - '.github/workflows/ui-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'packages/ui/**'
      - '.github/workflows/ui-tests.yml'

jobs:
  test:
    name: Test UI Components
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check
        run: pnpm type-check --filter @pommai/ui
        
      - name: Lint
        run: pnpm lint --filter @pommai/ui
        
      - name: Run unit tests
        run: pnpm test --filter @pommai/ui
        
      - name: Run comprehensive test suite
        run: pnpm test:all --filter @pommai/ui
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.node-version }}
          path: packages/ui/test-reports/
          
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          file: packages/ui/coverage/lcov.info
          flags: ui-components
          name: ui-components-coverage
          
  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
        
      - name: Run visual regression tests
        run: pnpm test:visual --filter @pommai/ui
        
      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-results
          path: packages/ui/test-results/
          
  accessibility:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run accessibility tests
        run: pnpm test:a11y --filter @pommai/ui
        
      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: packages/ui/test-reports/
          
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run performance tests
        run: pnpm test:perf --filter @pommai/ui
        
      - name: Upload performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: packages/ui/test-reports/
          
  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build UI package
        run: pnpm build --filter @pommai/ui
        
      - name: Test package exports
        run: |
          cd packages/ui
          node -e "
            const ui = require('./src/index.ts');
            console.log('‚úÖ Package exports working');
            console.log('Available components:', Object.keys(ui));
          "
          
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Analyze bundle size
        run: |
          cd packages/ui
          # Create a test build to analyze bundle size
          echo "import * as UI from './src/index.ts'; console.log(Object.keys(UI));" > bundle-test.js
          npx esbuild bundle-test.js --bundle --minify --outfile=bundle-output.js
          
          BUNDLE_SIZE=$(wc -c < bundle-output.js)
          echo "Bundle size: ${BUNDLE_SIZE} bytes"
          
          # Fail if bundle is too large (500KB limit)
          if [ $BUNDLE_SIZE -gt 512000 ]; then
            echo "‚ùå Bundle size too large: ${BUNDLE_SIZE} bytes (limit: 512KB)"
            exit 1
          else
            echo "‚úÖ Bundle size acceptable: ${BUNDLE_SIZE} bytes"
          fi
          
      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const bundleSize = fs.statSync('packages/ui/bundle-output.js').size;
            const comment = `## üì¶ Bundle Size Analysis
            
            UI Package bundle size: **${bundleSize} bytes** (${(bundleSize / 1024).toFixed(1)} KB)
            
            ${bundleSize > 512000 ? '‚ùå Bundle size exceeds 512KB limit' : '‚úÖ Bundle size within acceptable limits'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });