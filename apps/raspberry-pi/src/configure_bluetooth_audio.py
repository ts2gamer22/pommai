#!/usr/bin/env python3
"""
Configure and test Bluetooth audio output for Pommai client
This script helps identify and configure the correct audio device for Bluetooth speakers
"""

import pyaudio
import numpy as np
import wave
import sys
import os
import time
import subprocess
from typing import Optional, List, Dict, Any

def run_command(cmd: str) -> str:
    """Run a shell command and return output"""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        return result.stdout.strip()
    except Exception as e:
        return f"Error: {e}"

def get_bluetooth_devices() -> List[str]:
    """Get list of connected Bluetooth devices"""
    devices = []
    output = run_command("bluetoothctl devices Connected")
    if output and "Error" not in output:
        for line in output.split('\n'):
            if line.strip():
                devices.append(line.strip())
    return devices

def list_audio_devices() -> Dict[int, Dict[str, Any]]:
    """List all available audio devices"""
    p = pyaudio.PyAudio()
    devices = {}
    
    print("\n=== Available Audio Devices ===\n")
    
    for i in range(p.get_device_count()):
        info = p.get_device_info_by_index(i)
        
        # Only show output devices
        if info['maxOutputChannels'] > 0:
            devices[i] = info
            
            # Check if it might be a Bluetooth device
            is_bluetooth = any(bt_keyword in info['name'].lower() 
                             for bt_keyword in ['bluetooth', 'bluez', 'bluealsa', 'a2dp'])
            
            print(f"Device {i}: {info['name']}")
            print(f"  Channels: {info['maxOutputChannels']}")
            print(f"  Sample Rate: {info['defaultSampleRate']} Hz")
            print(f"  Host API: {p.get_host_api_info_by_index(info['hostApi'])['name']}")
            if is_bluetooth:
                print("  *** Likely Bluetooth device ***")
            print()
    
    p.terminate()
    return devices

def test_audio_device(device_index: Optional[int] = None, duration: float = 2.0):
    """Test audio output on specified device"""
    p = pyaudio.PyAudio()
    
    # Audio parameters
    sample_rate = 16000
    channels = 1
    format = pyaudio.paInt16
    
    # Generate test tone (440 Hz)
    frequency = 440
    t = np.linspace(0, duration, int(sample_rate * duration))
    audio_data = (np.sin(frequency * 2 * np.pi * t) * 0.3 * 32767).astype(np.int16)
    
    try:
        if device_index is not None:
            device_info = p.get_device_info_by_index(device_index)
            print(f"\nTesting device {device_index}: {device_info['name']}")
        else:
            print("\nTesting default output device")
        
        # Open stream
        stream = p.open(
            format=format,
            channels=channels,
            rate=sample_rate,
            output=True,
            output_device_index=device_index,
            frames_per_buffer=1024
        )
        
        print(f"Playing {frequency}Hz test tone for {duration} seconds...")
        
        # Play audio
        stream.write(audio_data.tobytes())
        
        # Close stream
        stream.stop_stream()
        stream.close()
        
        print("Test complete!")
        return True
        
    except Exception as e:
        print(f"Error testing device: {e}")
        return False
    
    finally:
        p.terminate()

def find_bluetooth_device() -> Optional[int]:
    """Try to automatically find the Bluetooth audio device"""
    p = pyaudio.PyAudio()
    
    bluetooth_keywords = ['bluetooth', 'bluez', 'bluealsa', 'a2dp', 'pulse']
    
    for i in range(p.get_device_count()):
        info = p.get_device_info_by_index(i)
        
        # Check if output device
        if info['maxOutputChannels'] > 0:
            # Check if name contains Bluetooth keywords
            if any(keyword in info['name'].lower() for keyword in bluetooth_keywords):
                print(f"\nFound potential Bluetooth device: {info['name']} (index {i})")
                p.terminate()
                return i
    
    p.terminate()
    return None

def create_alsa_config(device_name: str = "bluealsa"):
    """Create ALSA configuration for Bluetooth audio"""
    config = f"""# ALSA configuration for Bluetooth audio
# Generated by configure_bluetooth_audio.py

pcm.!default {{
    type plug
    slave.pcm "{device_name}"
}}

ctl.!default {{
    type hw
    card 0
}}

# If using BlueALSA
pcm.bluealsa {{
    type bluealsa
    device "XX:XX:XX:XX:XX:XX"  # Replace with your Bluetooth device MAC
    profile "a2dp"
}}
"""
    
    config_path = os.path.expanduser("~/.asoundrc")
    print(f"\nALSA configuration to write to {config_path}:")
    print(config)
    
    response = input("\nDo you want to write this configuration? (y/n): ")
    if response.lower() == 'y':
        with open(config_path, 'w') as f:
            f.write(config)
        print(f"Configuration written to {config_path}")
        print("Note: Replace XX:XX:XX:XX:XX:XX with your Bluetooth device MAC address")

def configure_pulseaudio_bluetooth():
    """Configure PulseAudio for Bluetooth"""
    print("\n=== Configuring PulseAudio for Bluetooth ===\n")
    
    # Check if PulseAudio is running
    pa_status = run_command("pactl info 2>/dev/null | grep 'Server Name'")
    if not pa_status:
        print("PulseAudio is not running. Starting...")
        run_command("pulseaudio --start")
        time.sleep(2)
    
    # Load Bluetooth modules
    print("Loading Bluetooth modules...")
    run_command("pactl load-module module-bluetooth-policy 2>/dev/null")
    run_command("pactl load-module module-bluetooth-discover 2>/dev/null")
    
    # List sinks
    print("\nAvailable audio sinks:")
    sinks = run_command("pactl list short sinks")
    print(sinks)
    
    # Find Bluetooth sink
    bluetooth_sink = None
    for line in sinks.split('\n'):
        if 'bluez' in line.lower():
            bluetooth_sink = line.split()[1]
            break
    
    if bluetooth_sink:
        print(f"\nFound Bluetooth sink: {bluetooth_sink}")
        print(f"Setting as default...")
        run_command(f"pactl set-default-sink {bluetooth_sink}")
        print("Done!")
    else:
        print("\nNo Bluetooth sink found. Make sure your Bluetooth device is connected.")

def update_pommai_config(device_index: int):
    """Update Pommai client configuration to use specific audio device"""
    config_file = "audio_device_config.py"
    
    config_content = f"""# Audio device configuration for Pommai client
# Generated by configure_bluetooth_audio.py

AUDIO_OUTPUT_DEVICE_INDEX = {device_index}
AUDIO_INPUT_DEVICE_INDEX = None  # Use default microphone

# To use this in pommai_client_fastrtc.py, modify the HardwareController initialization:
# self.hardware = HardwareController(
#     sample_rate=config.SAMPLE_RATE,
#     channels=config.CHANNELS,
#     chunk_size=config.CHUNK_SIZE,
#     input_device_index=AUDIO_INPUT_DEVICE_INDEX,
#     output_device_index=AUDIO_OUTPUT_DEVICE_INDEX
# )
"""
    
    print(f"\n=== Configuration to add to Pommai client ===")
    print(config_content)
    
    # Save to file
    with open(config_file, 'w') as f:
        f.write(config_content)
    print(f"\nConfiguration saved to {config_file}")
    
    # Also show how to update the main client
    print("\nTo apply this configuration, update pommai_client_fastrtc.py:")
    print("1. Import the configuration at the top:")
    print("   from audio_device_config import AUDIO_OUTPUT_DEVICE_INDEX, AUDIO_INPUT_DEVICE_INDEX")
    print("\n2. Update the HardwareController initialization (around line 189):")
    print("   output_device_index=AUDIO_OUTPUT_DEVICE_INDEX")

def main():
    print("=" * 50)
    print("Pommai Bluetooth Audio Configuration Tool")
    print("=" * 50)
    
    # Check Bluetooth devices
    print("\n=== Bluetooth Devices ===")
    bt_devices = get_bluetooth_devices()
    if bt_devices:
        print("Connected Bluetooth devices:")
        for device in bt_devices:
            print(f"  - {device}")
    else:
        print("No Bluetooth devices connected")
        print("Please connect your Bluetooth speaker first:")
        print("  bluetoothctl")
        print("  > power on")
        print("  > scan on")
        print("  > pair XX:XX:XX:XX:XX:XX")
        print("  > connect XX:XX:XX:XX:XX:XX")
        sys.exit(1)
    
    # List audio devices
    devices = list_audio_devices()
    
    if not devices:
        print("No output audio devices found!")
        sys.exit(1)
    
    # Try to find Bluetooth device automatically
    bt_device_index = find_bluetooth_device()
    
    if bt_device_index is not None:
        print(f"\nAutomatically detected Bluetooth device at index {bt_device_index}")
        response = input("Do you want to test this device? (y/n): ")
        if response.lower() == 'y':
            if test_audio_device(bt_device_index):
                response = input("\nDid you hear the test tone? (y/n): ")
                if response.lower() == 'y':
                    print("\nGreat! Bluetooth audio is working.")
                    update_pommai_config(bt_device_index)
                else:
                    print("\nAudio test failed. Trying other configurations...")
    
    # Manual device selection
    print("\n=== Manual Device Selection ===")
    print("Enter device index to test, or 'q' to quit:")
    
    while True:
        choice = input("\nDevice index (or 'q'): ").strip()
        
        if choice.lower() == 'q':
            break
        
        try:
            device_index = int(choice)
            if device_index in devices:
                if test_audio_device(device_index):
                    response = input("\nDid you hear the test tone? (y/n): ")
                    if response.lower() == 'y':
                        print("\nExcellent! This device works.")
                        update_pommai_config(device_index)
                        break
            else:
                print("Invalid device index")
        except ValueError:
            print("Please enter a valid number or 'q'")
    
    # Additional configuration options
    print("\n=== Additional Configuration Options ===")
    print("1. Configure PulseAudio for Bluetooth")
    print("2. Create ALSA configuration")
    print("3. Exit")
    
    choice = input("\nChoice (1-3): ").strip()
    
    if choice == '1':
        configure_pulseaudio_bluetooth()
    elif choice == '2':
        create_alsa_config()
    
    print("\n=== Configuration Complete ===")
    print("\nIf audio is still not working:")
    print("1. Make sure Bluetooth speaker is in A2DP mode (not HSP/HFP)")
    print("2. Check system volume is not muted")
    print("3. Restart the Pommai client with updated configuration")
    print("4. Check logs for any PyAudio errors")

if __name__ == "__main__":
    main()
