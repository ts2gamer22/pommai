import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

// ⚠️ IMPORTANT: BetterAuth tables are automatically managed by the component
// Do NOT define users, sessions, accounts, or verifications tables here
// The BetterAuth component injects these automatically via app.use(betterAuth) in convex.config.ts

// Pommai-specific tables only
const schema = defineSchema({
  // Application-specific user data
  // This complements the BetterAuth users table with app-specific fields
  users: defineTable({
    // No need to duplicate email, name, etc. - those are in BetterAuth's users table
    // Just add app-specific fields if needed
    email: v.string(),
    emailVerified: v.boolean(),
    name: v.optional(v.string()),
    image: v.optional(v.string()),
    createdAt: v.string(),
    updatedAt: v.string(),
  }).index("email", ["email"]),
  
  // Toy management tables
  toys: defineTable({
    name: v.string(),
    type: v.string(), // "bear", "rabbit", "dragon", "robot", "custom"
    creatorId: v.id("users"),
    isForKids: v.boolean(), // Critical flag that enables Guardian Mode
    ageGroup: v.optional(v.union(v.literal("3-5"), v.literal("6-8"), v.literal("9-12"))), // Required if isForKids
    voiceId: v.string(),
    personalityPrompt: v.string(),
    knowledgeBaseId: v.optional(v.id("knowledgeBases")),
    agentThreadId: v.optional(v.string()),
    
    // Guardian Mode specific fields (only when isForKids = true)
    guardianId: v.optional(v.id("users")), // Parent managing the toy
    safetyLevel: v.optional(v.union(v.literal("strict"), v.literal("moderate"), v.literal("relaxed"))),
    contentFilters: v.optional(v.object({
      enabledCategories: v.array(v.string()),
      customBlockedTopics: v.array(v.string()),
    })),
    
    // Personality traits
    personalityTraits: v.object({
      traits: v.array(v.string()), // max 3 traits
      speakingStyle: v.object({
        vocabulary: v.union(v.literal("simple"), v.literal("moderate"), v.literal("advanced")),
        sentenceLength: v.union(v.literal("short"), v.literal("medium"), v.literal("long")),
        usesSoundEffects: v.boolean(),
        catchPhrases: v.array(v.string()),
      }),
      interests: v.array(v.string()),
      favoriteTopics: v.array(v.string()),
      avoidTopics: v.array(v.string()),
      behavior: v.object({
        encouragesQuestions: v.boolean(),
        tellsStories: v.boolean(),
        playsGames: v.boolean(),
        educationalFocus: v.number(), // 0-10 slider
        imaginationLevel: v.number(), // 0-10 slider
      }),
    }),
    
    // Device management
    assignedDevices: v.array(v.string()), // Can be assigned to multiple devices
    status: v.union(v.literal("active"), v.literal("paused"), v.literal("archived")),
    
    // Metadata
    isPublic: v.boolean(), // Can be shared in community
    tags: v.array(v.string()),
    usageCount: v.number(),
    createdAt: v.string(),
    lastActiveAt: v.string(),
    lastModifiedAt: v.string(),
  })
    .index("by_creator", ["creatorId"])
    .index("by_guardian", ["guardianId"])
    .index("for_kids", ["isForKids"]),
  
  // Knowledge base for toys
  knowledgeBases: defineTable({
    toyId: v.id("toys"),
    toyBackstory: v.object({
      origin: v.string(),
      personality: v.string(),
      specialAbilities: v.array(v.string()),
      favoriteThings: v.array(v.string()),
    }),
    familyInfo: v.optional(v.object({
      members: v.array(v.object({
        name: v.string(),
        relationship: v.string(),
        facts: v.array(v.string()),
      })),
      pets: v.array(v.object({
        name: v.string(),
        type: v.string(),
        facts: v.array(v.string()),
      })),
      importantDates: v.array(v.object({
        date: v.string(),
        event: v.string(),
      })),
    })),
    customFacts: v.array(v.object({
      category: v.string(),
      fact: v.string(),
      importance: v.union(v.literal("high"), v.literal("medium"), v.literal("low")),
    })),
    memories: v.array(v.object({
      id: v.string(),
      description: v.string(),
      date: v.string(),
      participants: v.array(v.string()),
      autoGenerated: v.boolean(),
    })),
    // Vector storage reference
    vectorStoreId: v.optional(v.string()), // Reference to external vector DB
    createdAt: v.string(),
    updatedAt: v.string(),
  }).index("by_toy", ["toyId"]),
  
  // Voice library
  voices: defineTable({
    name: v.string(),
    description: v.string(),
    language: v.string(),
    accent: v.optional(v.string()),
    ageGroup: v.string(),
    gender: v.union(v.literal("male"), v.literal("female"), v.literal("neutral")),
    previewUrl: v.string(),
    provider: v.union(v.literal("11labs"), v.literal("azure"), v.literal("custom")),
    externalVoiceId: v.string(), // Provider's voice ID
    tags: v.array(v.string()),
    isPremium: v.boolean(),
    isPublic: v.boolean(),
    uploadedBy: v.optional(v.id("users")),
    usageCount: v.number(),
    averageRating: v.number(),
    createdAt: v.string(),
  })
    .index("by_uploader", ["uploadedBy"])
    .index("is_public", ["isPublic"]) 
    .index("by_external", ["externalVoiceId"]),
  
  // Toy assignment to devices/children
  toyAssignments: defineTable({
    toyId: v.id("toys"),
    deviceId: v.optional(v.string()),
    childId: v.optional(v.id("children")),
    assignedAt: v.string(),
    assignedBy: v.id("users"),
    isActive: v.boolean(),
  })
    .index("by_toy", ["toyId"])
    .index("by_device", ["deviceId"])
    .index("by_child", ["childId"]),
  
  // Conversations with toys
  conversations: defineTable({
    toyId: v.id("toys"),
    childId: v.optional(v.id("children")),
    userId: v.optional(v.id("users")), // For non-child users
    sessionId: v.string(),
    startTime: v.string(),
    endTime: v.optional(v.string()),
    duration: v.number(), // in seconds
    messageCount: v.number(),
    flaggedMessages: v.number(),
    sentiment: v.union(v.literal("positive"), v.literal("neutral"), v.literal("negative")),
    topics: v.array(v.string()),
    location: v.union(v.literal("toy"), v.literal("web"), v.literal("app")),
    deviceId: v.optional(v.string()),
    // Guardian live monitoring controls
    isPaused: v.optional(v.boolean()),
    isMonitored: v.optional(v.boolean()),
  })
    .index("by_toy", ["toyId"])
    .index("by_child", ["childId"])
    .index("by_user", ["userId"])
    .index("by_session", ["sessionId"]),
  
  // Messages within conversations
  messages: defineTable({
    conversationId: v.id("conversations"),
    role: v.union(v.literal("user"), v.literal("toy"), v.literal("system")),
    content: v.string(),
    timestamp: v.string(),
    audioUrl: v.optional(v.string()),
    metadata: v.optional(v.object({
      sentiment: v.optional(v.string()),
      safetyScore: v.optional(v.number()),
      flagged: v.optional(v.boolean()),
      resolved: v.optional(v.boolean()),
      topics: v.optional(v.array(v.string())),
      educationalValue: v.optional(v.number()),
      emotionalTone: v.optional(v.string()),
      safetyFlags: v.optional(v.array(v.string())),
    })),
  })
    .index("by_conversation", ["conversationId"])
    .index("by_timestamp", ["timestamp"]),
  
  // Parent/child relationships
  children: defineTable({
    parentId: v.id("users"),
    name: v.string(),
    birthDate: v.string(),
    voiceProfile: v.optional(v.string()),
    avatar: v.optional(v.string()),
    settings: v.object({
      contentLevel: v.union(v.literal("toddler"), v.literal("preschool"), v.literal("elementary")),
      safetyLevel: v.union(v.literal("strict"), v.literal("moderate"), v.literal("relaxed")),
      allowedTopics: v.array(v.string()),
      blockedWords: v.array(v.string()),
      dailyTimeLimit: v.optional(v.number()), // in minutes
      bedtimeRestrictions: v.optional(v.object({
        startTime: v.string(),
        endTime: v.string(),
      })),
    }),
    // Guardian controls for SafetyControls UI (applies to all toys assigned to this child)
    guardianControls: v.optional(v.object({
      contentFilters: v.object({
        strictnessLevel: v.union(v.literal("low"), v.literal("medium"), v.literal("high")),
        blockedTopics: v.array(v.string()),
        allowedTopics: v.array(v.string()),
      }),
      timeControls: v.object({
        dailyLimit: v.number(),
        timeRestrictions: v.array(v.object({
          dayType: v.union(v.literal("weekday"), v.literal("weekend")),
          startTime: v.string(),
          endTime: v.string(),
        })),
        schoolDayRules: v.boolean(),
        weekendRules: v.boolean(),
      }),
      notifications: v.object({
        realTimeAlerts: v.boolean(),
        dailySummary: v.boolean(),
        weeklyReport: v.boolean(),
        severityThreshold: v.union(v.literal("all"), v.literal("medium"), v.literal("high")),
      }),
    })),
    createdAt: v.string(),
    updatedAt: v.string(),
  }).index("parentId", ["parentId"]),
  
  
  // Device management
  devices: defineTable({
    parentId: v.id("users"),
    deviceId: v.string(),
    name: v.string(),
    type: v.union(v.literal("raspberry_pi"), v.literal("web"), v.literal("mobile")),
    lastSeen: v.string(),
    isActive: v.boolean(),
    settings: v.object({
      volumeLevel: v.number(),
      ledBrightness: v.number(),
      wakeSensitivity: v.number(),
    }),
  })
    .index("parentId", ["parentId"])
    .index("deviceId", ["deviceId"]),
  
  // Content moderation logs
  moderationLogs: defineTable({
    messageId: v.id("messages"),
    flagType: v.string(),
    severity: v.union(v.literal("low"), v.literal("medium"), v.literal("high")),
    details: v.string(),
    action: v.string(),
    timestamp: v.string(),
  }).index("messageId", ["messageId"]),
  
  // RAG Knowledge storage for toys
  toyKnowledge: defineTable({
    toyId: v.id("toys"),
    content: v.string(),
    type: v.union(
      v.literal("backstory"),
      v.literal("personality"),
      v.literal("facts"),
      v.literal("memories"),
      v.literal("rules"),
      v.literal("preferences"),
      v.literal("relationships")
    ),
    metadata: v.optional(v.object({
      source: v.string(),
      importance: v.number(), // 0-1 scale
      tags: v.array(v.string()),
      expiresAt: v.optional(v.number()), // For temporary knowledge
    })),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_toy", ["toyId"])
    .index("by_type", ["type"])
    .index("by_created", ["createdAt"]),
});

export default schema;
